/**
 * OLY Token Security Exploits - Complete Test Suite Runner
 * 
 * This script runs all proof-of-concept exploits in sequence to demonstrate
 * the full scope of vulnerabilities in the OLY token contract.
 * 
 * ‚ö†Ô∏è FOR TESTNET USE ONLY - DO NOT RUN ON MAINNET
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class ExploitRunner {
    constructor() {
        this.results = {
            exploits: [],
            summary: {
                total: 0,
                successful: 0,
                failed: 0,
                critical: 0,
                major: 0,
                medium: 0
            }
        };
        
        this.exploitList = [
            {
                name: "Complete Protocol DoS",
                file: "DoSExploit.js",
                severity: "CRITICAL",
                cve: "CVE-OLY-003",
                description: "Demonstrates complete protocol failure via malicious fee receiver"
            },
            {
                name: "SafeMath Bypass Underflow",
                file: "UnderflowExploit.js", 
                severity: "CRITICAL",
                cve: "CVE-OLY-001",
                description: "Shows potential for unlimited token creation through arithmetic underflow"
            },
            {
                name: "Reentrancy Attack",
                file: "ReentrancyExploit.js",
                severity: "CRITICAL", 
                cve: "CVE-OLY-004",
                description: "Exploits reentrancy vulnerability during fee collection"
            },
            {
                name: "Role-Based Fee Bypass",
                file: "RoleBypassExploit.js",
                severity: "CRITICAL",
                cve: "CVE-OLY-005", 
                description: "Complete fee bypass through INTERN_SYSTEM role exploitation"
            },
            {
                name: "Precision-Based Fee Bypass",
                file: "PrecisionBypassExploit.js",
                severity: "MAJOR",
                cve: "CVE-OLY-008",
                description: "Systematic fee avoidance through micro-transactions"
            }
        ];
    }

    async runAllExploits() {
        console.log("üî¥ OLY Token Security Exploits - Complete Test Suite");
        console.log("=" .repeat(80));
        console.log("‚ö†Ô∏è  WARNING: FOR TESTNET USE ONLY - DO NOT RUN ON MAINNET");
        console.log("=" .repeat(80));
        console.log("");
        
        console.log("üìã Exploit Schedule:");
        this.exploitList.forEach((exploit, index) => {
            console.log(`   ${index + 1}. ${exploit.name} (${exploit.severity})`);
        });
        console.log("");
        
        // Check if Hardhat is available
        try {
            execSync('npx hardhat --version', { stdio: 'pipe' });
            console.log("‚úÖ Hardhat environment detected");
        } catch (error) {
            console.log("‚ùå Hardhat not available. Please install dependencies:");
            console.log("   npm install");
            process.exit(1);
        }
        
        // Start local Hardhat network if needed
        console.log("üöÄ Starting exploit execution...");
        console.log("");
        
        for (let i = 0; i < this.exploitList.length; i++) {
            const exploit = this.exploitList[i];
            await this.runSingleExploit(exploit, i + 1);
        }
        
        this.generateReport();
    }

    async runSingleExploit(exploit, index) {
        console.log(`üéØ [${index}/${this.exploitList.length}] ${exploit.name}`);
        console.log(`üìã ${exploit.cve}: ${exploit.description}`);
        console.log(`üî• Severity: ${exploit.severity}`);
        console.log("-" .repeat(60));
        
        const startTime = Date.now();
        let result = {
            name: exploit.name,
            file: exploit.file,
            severity: exploit.severity,
            cve: exploit.cve,
            status: 'UNKNOWN',
            duration: 0,
            output: '',
            error: null
        };
        
        try {
            const exploitPath = path.join(__dirname, exploit.file);
            
            if (!fs.existsSync(exploitPath)) {
                throw new Error(`Exploit file not found: ${exploitPath}`);
            }
            
            console.log(`üöÄ Executing ${exploit.file}...`);
            
            const output = execSync(`npx hardhat run ${exploitPath} --network localhost`, {
                encoding: 'utf8',
                stdio: 'pipe',
                timeout: 120000 // 2 minute timeout
            });
            
            result.status = 'SUCCESS';
            result.output = output;
            
            console.log("‚úÖ Exploit completed successfully");
            this.results.summary.successful++;
            
        } catch (error) {
            result.status = 'FAILED';
            result.error = error.message;
            
            console.log("‚ùå Exploit failed:", error.message);
            this.results.summary.failed++;
        }
        
        result.duration = Date.now() - startTime;
        this.results.exploits.push(result);
        
        // Update severity counters
        switch (exploit.severity) {
            case 'CRITICAL':
                this.results.summary.critical++;
                break;
            case 'MAJOR':
                this.results.summary.major++;
                break;
            case 'MEDIUM':
                this.results.summary.medium++;
                break;
        }
        
        this.results.summary.total++;
        
        console.log(`‚è±Ô∏è  Duration: ${result.duration}ms`);
        console.log("");
    }

    generateReport() {
        const report = this.createMarkdownReport();
        const reportPath = 'exploit-results-report.md';
        
        fs.writeFileSync(reportPath, report);
        
        console.log("üìä EXPLOIT EXECUTION SUMMARY");
        console.log("=" .repeat(60));
        console.log(`üìà Total Exploits: ${this.results.summary.total}`);
        console.log(`‚úÖ Successful: ${this.results.summary.successful}`);
        console.log(`‚ùå Failed: ${this.results.summary.failed}`);
        console.log(`üî¥ Critical: ${this.results.summary.critical}`);
        console.log(`üü† Major: ${this.results.summary.major}`);
        console.log(`üü° Medium: ${this.results.summary.medium}`);
        console.log("");
        
        const successRate = (this.results.summary.successful / this.results.summary.total * 100).toFixed(1);
        console.log(`üìä Success Rate: ${successRate}%`);
        
        if (this.results.summary.successful > 0) {
            console.log("üö® CRITICAL SECURITY ISSUES CONFIRMED");
            console.log("‚ö†Ô∏è  The OLY contract contains exploitable vulnerabilities");
            console.log("üõ°Ô∏è  Immediate remediation required before production deployment");
        }
        
        console.log("");
        console.log(`üìÑ Detailed report saved to: ${reportPath}`);
        
        // Print individual exploit results
        console.log("\nüìã Individual Exploit Results:");
        this.results.exploits.forEach((result, index) => {
            const status = result.status === 'SUCCESS' ? '‚úÖ' : '‚ùå';
            console.log(`   ${index + 1}. ${status} ${result.name} (${result.duration}ms)`);
            if (result.error) {
                console.log(`      Error: ${result.error.substring(0, 100)}...`);
            }
        });
    }

    createMarkdownReport() {
        const timestamp = new Date().toISOString();
        
        return `# OLY Token Security Exploits - Execution Report

Generated: ${timestamp}

## Executive Summary

This report documents the execution of proof-of-concept exploits against the OLY token smart contract. These exploits demonstrate critical security vulnerabilities that pose immediate risks to protocol security and user funds.

‚ö†Ô∏è **All exploits were executed in a controlled testnet environment for security research purposes only.**

## Execution Summary

- **Total Exploits**: ${this.results.summary.total}
- **Successful**: ${this.results.summary.successful}
- **Failed**: ${this.results.summary.failed}
- **Success Rate**: ${(this.results.summary.successful / this.results.summary.total * 100).toFixed(1)}%

### Severity Breakdown

- üî¥ **Critical**: ${this.results.summary.critical} exploits
- üü† **Major**: ${this.results.summary.major} exploits  
- üü° **Medium**: ${this.results.summary.medium} exploits

## Exploit Results

${this.results.exploits.map((result, index) => `
### ${index + 1}. ${result.name}

- **CVE**: ${result.cve}
- **Severity**: ${result.severity}
- **Status**: ${result.status}
- **Duration**: ${result.duration}ms
- **File**: ${result.file}

${result.status === 'SUCCESS' ? 
  '‚úÖ **EXPLOIT SUCCESSFUL** - Vulnerability confirmed and exploitable' : 
  `‚ùå **EXPLOIT FAILED** - ${result.error}`}

${result.status === 'SUCCESS' && result.output ? 
  `\n**Key Findings**:\n\`\`\`\n${result.output.substring(0, 500)}...\n\`\`\`` : ''}
`).join('\n')}

## Security Assessment

${this.results.summary.successful > 0 ? `
### üö® CRITICAL FINDINGS

The execution of ${this.results.summary.successful} successful exploits confirms that the OLY token contract contains **CRITICAL SECURITY VULNERABILITIES** that pose immediate risks:

#### Confirmed Vulnerabilities:
${this.results.exploits.filter(r => r.status === 'SUCCESS').map(r => 
  `- **${r.cve}**: ${r.name} (${r.severity})`
).join('\n')}

#### Immediate Risks:
- Protocol insolvency through arithmetic vulnerabilities
- Complete denial of service attacks
- Systematic fee bypass mechanisms  
- Reentrancy-based token theft
- Administrative privilege abuse

### Recommendations

1. **DO NOT DEPLOY** the current contract to production
2. **Implement all recommended fixes** from the security audit
3. **Re-run these exploits** after implementing fixes to verify mitigation
4. **Conduct additional security audits** before deployment
5. **Implement comprehensive monitoring** for production deployment

` : `
### ‚úÖ NO EXPLOITS SUCCESSFUL

All exploit attempts failed, which may indicate:
- Proper security controls are in place
- Exploits need refinement for the current contract version
- Network or execution environment issues

**Note**: Failed exploits do not guarantee security. Manual code review and professional audits are still recommended.
`}

## Technical Details

### Execution Environment
- **Network**: Localhost Hardhat
- **Timestamp**: ${timestamp}
- **Total Execution Time**: ${this.results.exploits.reduce((sum, r) => sum + r.duration, 0)}ms

### Exploit Files
${this.results.exploits.map(r => `- \`${r.file}\` - ${r.name}`).join('\n')}

## Disclaimer

These exploits were developed and executed for:
- Security research and education
- Vulnerability demonstration  
- Bug bounty submissions
- Security audit validation

**DO NOT USE FOR MALICIOUS PURPOSES**

All exploits were executed in controlled testnet environments with no impact on production systems or user funds.

---

*This report was generated automatically by the OLY Security Exploit Runner*`;
    }
}

// Run if called directly
if (require.main === module) {
    const runner = new ExploitRunner();
    runner.runAllExploits()
        .then(() => {
            console.log("üèÅ All exploits completed");
            process.exit(0);
        })
        .catch((error) => {
            console.error("üí• Exploit runner failed:", error);
            process.exit(1);
        });
}

module.exports = ExploitRunner;